# 필요한 Repo Secret 설정
#### CI
# ${{ secrets.SUBMODULE_ACCESS_TOKEN }} : 깃허브 액세스 토큰

#### CD
# ${{ secrets.DOCKER_ID }} : 도커허브 id
# ${{ secrets.DOCKER_PASSWORD }} : 도커허브 pw
# ${{ secrets.REMOTE_HOST }} : 배포 서버 HOSTNAME
# ${{ secrets.REMOTE_PORT }} : 배포 서버 PORT
# ${{ secrets.REMOTE_USERNAME }} : 배포 서버 USERNAME
# ${{ secrets.REMOTE_SSH_KEY }} : 배포 서버 연결을 위한 SSH KEY

name: Backend CI & CD

# PR 요청에 대해
on:
  pull_request:
    # 특정 브랜치만
    branches: [dev, master]
    # pr이 생성 되었을 때, 담당 유저가 등록되었을 때, PR에 코드가 머지되었을 때, 라벨이 달렸을 때 동작
    types: [opened, assigned, synchronize, labeled, reopened]
  push:
    branches: [dev, master]

jobs:
  ###### 본문 내용과 관련 없는 Job, 빌드 테스트
  Continuous-Integration:
    env:
      # KEY - VALUE
      PR_NUMBER: ${{ github.event.pull_request.number }}
    # macos 환경에서 CI 실행 (환경은 github이 제공)
    runs-on: ubuntu-latest
    # 각 단계
    steps:

      # 소스코드 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v2
        # 서브모듈 설정
        with:
          submodules: true
          # secrets 변수는 github 세팅에서 미리 세팅한 데이터
          token: ${{ secrets.SUBMODULE_ACCESS_TOKEN }}

      - name: Install JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: 'gradle'

      # Gradle Package Caching
      - name: Caching Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Grant execute permission for gradle
        run: chmod +x ./gradlew

      #      - name: check
      #        run : |
      #            cat submodule/resources/main/prod/application.yml

      # develop 브랜치일 경우 local 환경 빌드
      - name: (PR) Build (With Test)
        if: github.event_name == 'pull_request'
        run: ./gradlew clean build --no-daemon -Dspring.profiles.active=local

      - name: (Push & Develop) Build (With Test)
        if: contains(github.ref, 'dev') && github.event_name == 'push'
        run: ./gradlew clean build --no-daemon -Dspring.profiles.active=local

      # matster 브랜치에 push 할 경우 prod 환경 빌드
      - name: (Push & Main) Build (Without Test)
        if: contains(github.ref, 'master') && github.event_name == 'push'
        run: ./gradlew clean build --no-daemon -DskipTests=True -Dspring.profiles.active=prod

      # master 브랜치에 push 할 경우 CD job에 jar file 업로드
      - name: (Push & Main) Archive production artifacts
        if: github.event_name == 'push' && contains(github.ref, 'master')
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: build/libs/*.jar

      - name: (PR) Archive test results artifacts
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v3
        with:
          name: test-result
          path: build/test-results/


  Report-Test-Result:
    if: github.event_name == 'pull_request'
    needs: Backend-CI
    # macos 환경에서 CI 실행 (환경은 github이 제공)
    runs-on: ubuntu-latest
    # 각 단계
    steps:
      # 이전 Job에서 업로드한 Jar file 다운로드
      - name: Download a test result
        uses: actions/download-artifact@v1
        with:
          name: test-result

      - name: Write the testing result on PR
        uses: EnricoMi/publish-unit-test-result-action/composite@v2
        if: always() && github.event_name == 'pull_request'
        with:
          junit_files: '**/test-result/TEST-*.xml'
          comment_title: '가치일기 Test Results'
          token: ${{ secrets.SUBMODULE_ACCESS_TOKEN }}

      - name: Check Comment on the Code line.
        uses: mikepenz/action-junit-report@v3
        if: always() && github.event_name == 'pull_request'
        with:
          report_paths: '**/test-result/TEST-*.xml'
          token: ${{ secrets.SUBMODULE_ACCESS_TOKEN }}

  Continuous-Deploy:
    # master 브랜치에 push 하는 경우에만 배포 JOB 실행
    if: github.event_name == 'push' && contains(github.ref, 'master')
    needs: Backend-CI
    runs-on: ubuntu-latest
    steps:

      # 소스코드 가져오기
      - name: Checkout source code
        uses: actions/checkout@v2
        # 서브모듈 설정
        with:
          submodules: true
          # secrets 변수는 github 세팅에서 미리 세팅한 데이터
          token: ${{ secrets.SUBMODULE_ACCESS_TOKEN }}

      # 이전 Job에서 업로드한 Jar file 다운로드
      - name : Download a built Jar File
        uses: actions/download-artifact@v1
        with:
          name: build

      # Docker Buildx Setting
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Docker Login
      - name: Docker Login
        uses: docker/login-action@v2.1.0
        with:
          # Username used to log against the Docker registry
          username: ${{ secrets.DOCKER_ID }}
          # Password or personal access token used to log against the Docker registry
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker Build & Push
      - name: Docker Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ secrets.DOCKER_ID }}/gachi-diary-backend:${{github.run_number}}
            ${{ secrets.DOCKER_ID }}/gachi-diary-backend:latest
          cache-from: type=gha    # gha=Github Action Cache
          cache-to: type=gha,mode=max

      - name: Transfer Deploy Script use SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          port: ${{ secrets.REMOTE_PORT }}
          username: ${{ secrets.REMOTE_USERNAME }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          source: "scripts/deploy.sh"
          target: "/home/centos/deploy"

#      - name: Transfer Deploy Script use SCP
#        uses: appleboy/scp-action@master
#        with:
#          host: ${{ secrets.REMOTE_HOST }}
#          port: ${{ secrets.REMOTE_PORT2 }}
#          username: ${{ secrets.REMOTE_USERNAME }}
#          key: ${{ secrets.REMOTE_SSH_KEY }}
#          source: "scripts/deploy2.sh"
#          target: "/home/centos/deploy"

      # SSH Connect
      - name: Execute Server Init Script
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          port: ${{ secrets.REMOTE_PORT }}
          username: ${{ secrets.REMOTE_USERNAME }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          script_stop: true
          script: |
            chmod +x /home/centos/deploy/scripts/deploy.sh && sh /home/centos/deploy/scripts/deploy.sh

#      - name: Check the deployed service URL
#        uses: jtalk/url-health-check-action@v3
#        with:
#          # Check the following URLs one by one sequentially
#          url: https://jaksim31.xyz/api/v0/members/test
#          # Follow redirects, or just report success on 3xx status codes
#          follow-redirect: false # Optional, defaults to "false"
#          # Fail this action after this many failed attempts
#          max-attempts: 10 # Optional, defaults to 1
#          # Delay between retries
#          retry-delay: 5s # Optional, only applicable to max-attempts > 1
#          # Retry all errors, including 404. This option might trigger curl upgrade.
#          retry-all: false # Optional, defaults to "false"
#
#      # SSH Connect
#      - name: Execute Server Init Script
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.REMOTE_HOST }}
#          port: ${{ secrets.REMOTE_PORT2 }}
#          username: ${{ secrets.REMOTE_USERNAME }}
#          key: ${{ secrets.REMOTE_SSH_KEY }}
#          script_stop: true
#          script: |
#            chmod +x /home/centos/deploy/scripts/deploy2.sh && sh /home/centos/deploy/scripts/deploy2.sh
